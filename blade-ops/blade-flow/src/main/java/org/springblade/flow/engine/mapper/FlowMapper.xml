<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.springblade.flow.engine.mapper.FlowMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="flowModelResultMap" type="org.springblade.flow.engine.entity.FlowModel">
        <result column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="model_key" property="modelKey"/>
        <result column="description" property="description"/>
        <result column="model_comment" property="modelComment"/>
        <result column="created" property="created"/>
        <result column="created_by" property="createdBy"/>
        <result column="last_updated" property="lastUpdated"/>
        <result column="last_updated_by" property="lastUpdatedBy"/>
        <result column="version" property="version"/>
        <result column="model_editor_json" property="modelEditorJson"/>
        <result column="thumbnail" property="thumbnail"/>
        <result column="model_type" property="modelType"/>
        <result column="tenant_id" property="tenantId"/>
    </resultMap>

    <!-- 通用查询映射结果 -->
    <resultMap id="roleResultMap" type="org.springblade.system.entity.Role">
        <id column="id" property="id"/>
        <result column="parent_id" property="parentId"/>
        <result column="role_name" property="roleName"/>
        <result column="sort" property="sort"/>
        <result column="role_alias" property="roleAlias"/>
        <result column="is_deleted" property="isDeleted"/>
    </resultMap>
    <resultMap id="compositionClaimListResultMap" type="org.springblade.task.vo.CompositionClaimListVO">
        <result column="id" property="compositionId"/>
        <result column="name" property="name"/>
        <result column="process_instance_id" property="processInstanceId"/>
    </resultMap>

    <resultMap id="compositionClaimCountResultMap" type="org.springblade.task.vo.CompositionClaimCountVO">
        <id column="id" property="compositionId"/>
        <result column="name" property="name"/>
        <result column="count(c.id)" property="count"/>
    </resultMap>

    <update id="updateStatistic">
        update bladex.mk_statistics s
        left join bladex.mk_composition c on s.composition_id=c.id
        set s.status=3
        where c.annotation_type=#{type}
        and s.sub_task_id=#{labelTaskId}
        and s.status=1;
    </update>

    <select id="selectFlowPage" resultMap="flowModelResultMap">
        SELECT
            a.id,
            a.name,
            a.model_key,
            a.description,
            a.model_comment,
            a.created,
            a.created_by,
            a.last_updated,
            a.last_updated_by,
            a.version,
            a.model_editor_json,
            a.thumbnail,
            a.model_type,
            a.tenant_id
        FROM
            ACT_DE_MODEL a
        WHERE
            1 = 1
        ORDER BY
            a.created DESC
    </select>

    <select id="findByParentModelId" parameterType="string" resultMap="flowModelResultMap">
        select model.* from ACT_DE_MODEL_RELATION modelrelation
                                inner join ACT_DE_MODEL model on modelrelation.model_id = model.id
        where modelrelation.parent_model_id = #{_parameter}
    </select>

    <select id="getRoleByTemplateComposition" resultMap="roleResultMap">
        select r.* from bladex.blade_role r
        inner join bladex.mk_template_composition tc
        on r.role_alias=tc.label_role_name
        where tc.template_id=#{templateId} and tc.composition_id=#{compositionId} and tc.is_deleted=0 limit 1
    </select>

    <select id="getLabelRoleAliasByCompositionId" resultType="java.lang.String">
        select distinct label_role_name from bladex.mk_template_composition
        where composition_id=#{compositionId} and is_deleted=0
    </select>

    <select id="getInspectionRoleAliasByCompositionId" resultType="java.lang.String">
        select distinct inspection_role_name from bladex.mk_template_composition
        where composition_id=#{compositionId} and is_deleted=0
    </select>

    <select id="getLabelRoleAliasByProcessInstanceId" resultType="java.lang.String">
        select distinct label_role_name from bladex.mk_template_composition tc inner join bladex.mk_task_label tl
        on tc.template_id=tl.template_id
        where tl.process_instance_id=#{param2} and tc.is_deleted=0
    </select>

    <select id="getInspectionRoleAliasByProcessInstanceId" resultType="java.lang.String">
        select distinct inspection_role_name from bladex.mk_template_composition tc inner join bladex.mk_task_label tl
        on tc.template_id=tl.template_id
        where tl.process_instance_id=#{processInstanceId} and tc.is_deleted=0
    </select>

    <select id="getRoleAliasCountByProcessInstanceId" resultType="int">
        select count(*) from (
        select distinct label_role_name from bladex.mk_template_composition tc inner join bladex.mk_task_label tl
        on tc.template_id=tl.template_id
        where tl.process_instance_id=#{processInstanceId} and tc.is_deleted=0 AND label_role_name in
        <foreach item="item" index="index" collection="roleAlias" open="(" separator="," close=")">
            #{item}
        </foreach>
        union
        select distinct inspection_role_name from bladex.mk_template_composition tc inner join bladex.mk_task_label tl
        on tc.template_id=tl.template_id
        where tl.process_instance_id=#{processInstanceId} and tc.is_deleted=0 AND inspection_role_name in
        <foreach item="item" index="index" collection="roleAlias" open="(" separator="," close=")">
            #{item}
        </foreach>
        ) u
    </select>

    <select id="getCompositionClaimCountByRoleAlias" resultMap="compositionClaimCountResultMap">
        SELECT c.id,c.name,count(c.id) FROM
        bladex.mk_task_label tl
        inner join bladex_flow.ACT_HI_TASKINST flow
        ON tl.process_instance_id = flow.PROC_INST_ID_
        inner join bladex_flow.ACT_HI_IDENTITYLINK id
        ON id.TASK_ID_=flow.ID_
        inner join bladex.mk_template_composition tc
        ON tl.template_id=tc.template_id
        inner join bladex.mk_composition c
        ON tc.composition_id=c.id
        WHERE ISNULL(flow.ASSIGNEE_) AND tc.is_deleted=0 AND id.GROUP_ID_ in
        <foreach item="item" index="index" collection="roleAlias" open="(" separator="," close=")">
            #{item}
        </foreach>
        AND c.name=flow.NAME_
        AND not exists (
            select PROC_INST_ID_ from bladex_flow.ACT_RU_VARIABLE
            where PROC_INST_ID_=tl.process_instance_id and NAME_ in
            <foreach item="item" index="index" collection="compositionList" open="(" separator="," close=")">
                #{item}
            </foreach>
        )
        group by c.id
    </select>

    <select id="compositionClaimList" resultMap="compositionClaimListResultMap">
        SELECT c.id,c.name,tl.process_instance_id FROM
            bladex.mk_task_label tl
            inner join bladex_flow.ACT_HI_TASKINST flow
        ON tl.process_instance_id = flow.PROC_INST_ID_
            inner join bladex_flow.ACT_HI_IDENTITYLINK id
        ON id.TASK_ID_=flow.ID_
            inner join bladex.mk_template_composition tc
        ON tl.template_id=tc.template_id
            inner join bladex.mk_composition c
        ON tc.composition_id=c.id
        WHERE ISNULL(flow.ASSIGNEE_) AND tc.is_deleted=0 AND id.GROUP_ID_ in
        <foreach item="item" index="index" collection="roleAlias" open="(" separator="," close=")">
            #{item}
        </foreach>
        AND c.name=flow.NAME_
    </select>

    <select id="getCompositionsByRoleAlias" resultType="java.lang.String">
        SELECT c.name FROM
        bladex.mk_task_label tl
        inner join bladex_flow.ACT_HI_TASKINST flow
        ON tl.process_instance_id = flow.PROC_INST_ID_
        inner join bladex_flow.ACT_HI_IDENTITYLINK id
        ON id.TASK_ID_=flow.ID_
        inner join bladex.mk_template_composition tc
        ON tl.template_id=tc.template_id
        inner join bladex.mk_composition c
        ON tc.composition_id=c.id
        WHERE ISNULL(flow.ASSIGNEE_) AND tc.is_deleted=0 AND id.GROUP_ID_ in
        <foreach item="item" index="index" collection="roleAlias" open="(" separator="," close=")">
            #{item}
        </foreach>
        AND c.name=flow.NAME_
        GROUP BY c.id
    </select>

    <select id="claimOneByCompositionId" resultType="java.lang.String">
        SELECT flow.ID_ FROM
        bladex.mk_task_label tl
        inner join bladex_flow.ACT_HI_TASKINST flow
        ON tl.process_instance_id = flow.PROC_INST_ID_
        inner join bladex_flow.ACT_HI_IDENTITYLINK id
        ON id.TASK_ID_=flow.ID_
        inner join bladex.mk_template_composition tc
        ON tl.template_id=tc.template_id
        inner join bladex.mk_composition c
        ON tc.composition_id=c.id
        WHERE ISNULL(flow.ASSIGNEE_) AND tc.is_deleted=0 AND id.GROUP_ID_ in
        <foreach item="item" index="index" collection="roleAlias" open="(" separator="," close=")">
            #{item}
        </foreach>
        AND c.name=flow.NAME_
        AND c.id=#{compositionId}
        AND not exists (
        select PROC_INST_ID_ from bladex_flow.ACT_RU_VARIABLE
        where PROC_INST_ID_=tl.process_instance_id and NAME_ in
        <foreach item="item" index="index" collection="compositionList" open="(" separator="," close=")">
            #{item}
        </foreach>
        )
        order by flow.LAST_UPDATED_TIME_ desc limit 1
    </select>
</mapper>
